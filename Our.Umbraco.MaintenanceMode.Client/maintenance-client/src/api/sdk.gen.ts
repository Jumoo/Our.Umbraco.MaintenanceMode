// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetSettingsData, GetSettingsResponse, GetStatusData, GetStatusResponse, SaveSettingsData, ToggleAccessData, ToggleFrozenData, ToggleModeData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class MaintenanceModeService {
    public static getSettings<ThrowOnError extends boolean = true>(options?: Options<GetSettingsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetSettingsResponse, unknown, ThrowOnError>({
            url: '/umbraco/maintenance/api/v1/GetSettings',
            ...options
        });
    }
    
    public static getStatus<ThrowOnError extends boolean = true>(options?: Options<GetStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetStatusResponse, unknown, ThrowOnError>({
            url: '/umbraco/maintenance/api/v1/GetStatus',
            ...options
        });
    }
    
    public static saveSettings<ThrowOnError extends boolean = true>(options?: Options<SaveSettingsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
            url: '/umbraco/maintenance/api/v1/SaveSettings',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static toggleAccess<ThrowOnError extends boolean = true>(options?: Options<ToggleAccessData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
            url: '/umbraco/maintenance/api/v1/ToggleAccess',
            ...options
        });
    }
    
    public static toggleFrozen<ThrowOnError extends boolean = true>(options?: Options<ToggleFrozenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
            url: '/umbraco/maintenance/api/v1/ToggleFrozen',
            ...options
        });
    }
    
    public static toggleMode<ThrowOnError extends boolean = true>(options?: Options<ToggleModeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
            url: '/umbraco/maintenance/api/v1/ToggleMode',
            ...options
        });
    }
    
}