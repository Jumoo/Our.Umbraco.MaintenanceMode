{"version":3,"file":"context-H6KD_sQ7.js","sources":["../../../assets/src/api/core/ApiError.ts","../../../assets/src/api/core/CancelablePromise.ts","../../../assets/src/api/core/OpenAPI.ts","../../../assets/src/api/core/request.ts","../../../assets/src/api/services/MaintenanceModeResource.ts","../../../assets/src/contexts/context.ts"],"sourcesContent":["/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\n\nexport class ApiError extends Error {\n    public readonly url: string;\n    public readonly status: number;\n    public readonly statusText: string;\n    public readonly body: any;\n    public readonly request: ApiRequestOptions;\n\n    constructor(request: ApiRequestOptions, response: ApiResult, message: string) {\n        super(message);\n\n        this.name = 'ApiError';\n        this.url = response.url;\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n        this.request = request;\n    }\n}\r\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n\n    constructor(message: string) {\n        super(message);\n        this.name = 'CancelError';\n    }\n\n    public get isCancelled(): boolean {\n        return true;\n    }\n}\n\nexport interface OnCancel {\n    readonly isResolved: boolean;\n    readonly isRejected: boolean;\n    readonly isCancelled: boolean;\n\n    (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n    #isResolved: boolean;\n    #isRejected: boolean;\n    #isCancelled: boolean;\n    readonly #cancelHandlers: (() => void)[];\n    readonly #promise: Promise<T>;\n    #resolve?: (value: T | PromiseLike<T>) => void;\n    #reject?: (reason?: any) => void;\n\n    constructor(\n        executor: (\n            resolve: (value: T | PromiseLike<T>) => void,\n            reject: (reason?: any) => void,\n            onCancel: OnCancel\n        ) => void\n    ) {\n        this.#isResolved = false;\n        this.#isRejected = false;\n        this.#isCancelled = false;\n        this.#cancelHandlers = [];\n        this.#promise = new Promise<T>((resolve, reject) => {\n            this.#resolve = resolve;\n            this.#reject = reject;\n\n            const onResolve = (value: T | PromiseLike<T>): void => {\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n                    return;\n                }\n                this.#isResolved = true;\n                this.#resolve?.(value);\n            };\n\n            const onReject = (reason?: any): void => {\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n                    return;\n                }\n                this.#isRejected = true;\n                this.#reject?.(reason);\n            };\n\n            const onCancel = (cancelHandler: () => void): void => {\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n                    return;\n                }\n                this.#cancelHandlers.push(cancelHandler);\n            };\n\n            Object.defineProperty(onCancel, 'isResolved', {\n                get: (): boolean => this.#isResolved,\n            });\n\n            Object.defineProperty(onCancel, 'isRejected', {\n                get: (): boolean => this.#isRejected,\n            });\n\n            Object.defineProperty(onCancel, 'isCancelled', {\n                get: (): boolean => this.#isCancelled,\n            });\n\n            return executor(onResolve, onReject, onCancel as OnCancel);\n        });\n    }\n\n     get [Symbol.toStringTag]() {\n            return \"Cancellable Promise\";\n     }\n\n    public then<TResult1 = T, TResult2 = never>(\n        onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n        onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n    ): Promise<TResult1 | TResult2> {\n        return this.#promise.then(onFulfilled, onRejected);\n    }\n\n    public catch<TResult = never>(\n        onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null\n    ): Promise<T | TResult> {\n        return this.#promise.catch(onRejected);\n    }\n\n    public finally(onFinally?: (() => void) | null): Promise<T> {\n        return this.#promise.finally(onFinally);\n    }\n\n    public cancel(): void {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n            return;\n        }\n        this.#isCancelled = true;\n        if (this.#cancelHandlers.length) {\n            try {\n                for (const cancelHandler of this.#cancelHandlers) {\n                    cancelHandler();\n                }\n            } catch (error) {\n                console.warn('Cancellation threw an error', error);\n                return;\n            }\n        }\n        this.#cancelHandlers.length = 0;\n        this.#reject?.(new CancelError('Request aborted'));\n    }\n\n    public get isCancelled(): boolean {\n        return this.#isCancelled;\n    }\n}\r\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\ntype Headers = Record<string, string>;\n\nexport type OpenAPIConfig = {\n    BASE: string;\n    VERSION: string;\n    WITH_CREDENTIALS: boolean;\n    CREDENTIALS: 'include' | 'omit' | 'same-origin';\n    TOKEN?: string | Resolver<string> | undefined;\n    USERNAME?: string | Resolver<string> | undefined;\n    PASSWORD?: string | Resolver<string> | undefined;\n    HEADERS?: Headers | Resolver<Headers> | undefined;\n    ENCODE_PATH?: ((path: string) => string) | undefined;\n};\n\nexport const OpenAPI: OpenAPIConfig = {\n    BASE: '',\n    VERSION: 'Latest',\n    WITH_CREDENTIALS: false,\n    CREDENTIALS: 'include',\n    TOKEN: undefined,\n    USERNAME: undefined,\n    PASSWORD: undefined,\n    HEADERS: undefined,\n    ENCODE_PATH: undefined,\n};\r\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport { ApiError } from './ApiError';\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\nimport { CancelablePromise } from './CancelablePromise';\nimport type { OnCancel } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nexport const isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {\n    return value !== undefined && value !== null;\n};\n\nexport const isString = (value: any): value is string => {\n    return typeof value === 'string';\n};\n\nexport const isStringWithValue = (value: any): value is string => {\n    return isString(value) && value !== '';\n};\n\nexport const isBlob = (value: any): value is Blob => {\n    return (\n        typeof value === 'object' &&\n        typeof value.type === 'string' &&\n        typeof value.stream === 'function' &&\n        typeof value.arrayBuffer === 'function' &&\n        typeof value.constructor === 'function' &&\n        typeof value.constructor.name === 'string' &&\n        /^(Blob|File)$/.test(value.constructor.name) &&\n        /^(Blob|File)$/.test(value[Symbol.toStringTag])\n    );\n};\n\nexport const isFormData = (value: any): value is FormData => {\n    return value instanceof FormData;\n};\n\nexport const base64 = (str: string): string => {\n    try {\n        return btoa(str);\n    } catch (err) {\n        // @ts-ignore\n        return Buffer.from(str).toString('base64');\n    }\n};\n\nexport const getQueryString = (params: Record<string, any>): string => {\n    const qs: string[] = [];\n\n    const append = (key: string, value: any) => {\n        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n    };\n\n    const process = (key: string, value: any) => {\n        if (isDefined(value)) {\n            if (Array.isArray(value)) {\n                value.forEach(v => {\n                    process(key, v);\n                });\n            } else if (typeof value === 'object') {\n                Object.entries(value).forEach(([k, v]) => {\n                    process(`${key}[${k}]`, v);\n                });\n            } else {\n                append(key, value);\n            }\n        }\n    };\n\n    Object.entries(params).forEach(([key, value]) => {\n        process(key, value);\n    });\n\n    if (qs.length > 0) {\n        return `?${qs.join('&')}`;\n    }\n\n    return '';\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n    const encoder = config.ENCODE_PATH || encodeURI;\n\n    const path = options.url\n        .replace('{api-version}', config.VERSION)\n        .replace(/{(.*?)}/g, (substring: string, group: string) => {\n            if (options.path?.hasOwnProperty(group)) {\n                return encoder(String(options.path[group]));\n            }\n            return substring;\n        });\n\n    const url = `${config.BASE}${path}`;\n    if (options.query) {\n        return `${url}${getQueryString(options.query)}`;\n    }\n    return url;\n};\n\nexport const getFormData = (options: ApiRequestOptions): FormData | undefined => {\n    if (options.formData) {\n        const formData = new FormData();\n\n        const process = (key: string, value: any) => {\n            if (isString(value) || isBlob(value)) {\n                formData.append(key, value);\n            } else {\n                formData.append(key, JSON.stringify(value));\n            }\n        };\n\n        Object.entries(options.formData)\n            .filter(([_, value]) => isDefined(value))\n            .forEach(([key, value]) => {\n                if (Array.isArray(value)) {\n                    value.forEach(v => process(key, v));\n                } else {\n                    process(key, value);\n                }\n            });\n\n        return formData;\n    }\n    return undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nexport const resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {\n    if (typeof resolver === 'function') {\n        return (resolver as Resolver<T>)(options);\n    }\n    return resolver;\n};\n\nexport const getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions): Promise<Headers> => {\n    const token = await resolve(options, config.TOKEN);\n    const username = await resolve(options, config.USERNAME);\n    const password = await resolve(options, config.PASSWORD);\n    const additionalHeaders = await resolve(options, config.HEADERS);\n\n    const headers = Object.entries({\n        Accept: 'application/json',\n        ...additionalHeaders,\n        ...options.headers,\n    })\n        .filter(([_, value]) => isDefined(value))\n        .reduce((headers, [key, value]) => ({\n            ...headers,\n            [key]: String(value),\n        }), {} as Record<string, string>);\n\n    if (isStringWithValue(token)) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    if (isStringWithValue(username) && isStringWithValue(password)) {\n        const credentials = base64(`${username}:${password}`);\n        headers['Authorization'] = `Basic ${credentials}`;\n    }\n\n    if (options.body) {\n        if (options.mediaType) {\n            headers['Content-Type'] = options.mediaType;\n        } else if (isBlob(options.body)) {\n            headers['Content-Type'] = options.body.type || 'application/octet-stream';\n        } else if (isString(options.body)) {\n            headers['Content-Type'] = 'text/plain';\n        } else if (!isFormData(options.body)) {\n            headers['Content-Type'] = 'application/json';\n        }\n    }\n\n    return new Headers(headers);\n};\n\nexport const getRequestBody = (options: ApiRequestOptions): any => {\n    if (options.body !== undefined) {\n        if (options.mediaType?.includes('/json')) {\n            return JSON.stringify(options.body)\n        } else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\n            return options.body;\n        } else {\n            return JSON.stringify(options.body);\n        }\n    }\n    return undefined;\n};\n\nexport const sendRequest = async (\n    config: OpenAPIConfig,\n    options: ApiRequestOptions,\n    url: string,\n    body: any,\n    formData: FormData | undefined,\n    headers: Headers,\n    onCancel: OnCancel\n): Promise<Response> => {\n    const controller = new AbortController();\n\n    const request: RequestInit = {\n        headers,\n        body: body ?? formData,\n        method: options.method,\n        signal: controller.signal,\n    };\n\n    if (config.WITH_CREDENTIALS) {\n        request.credentials = config.CREDENTIALS;\n    }\n\n    onCancel(() => controller.abort());\n\n    return await fetch(url, request);\n};\n\nexport const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {\n    if (responseHeader) {\n        const content = response.headers.get(responseHeader);\n        if (isString(content)) {\n            return content;\n        }\n    }\n    return undefined;\n};\n\nexport const getResponseBody = async (response: Response): Promise<any> => {\n    if (response.status !== 204) {\n        try {\n            const contentType = response.headers.get('Content-Type');\n            if (contentType) {\n                const jsonTypes = ['application/json', 'application/problem+json']\n                const isJSON = jsonTypes.some(type => contentType.toLowerCase().startsWith(type));\n                if (isJSON) {\n                    return await response.json();\n                } else {\n                    return await response.text();\n                }\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    return undefined;\n};\n\nexport const catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\n    const errors: Record<number, string> = {\n        400: 'Bad Request',\n        401: 'Unauthorized',\n        403: 'Forbidden',\n        404: 'Not Found',\n        500: 'Internal Server Error',\n        502: 'Bad Gateway',\n        503: 'Service Unavailable',\n        ...options.errors,\n    }\n\n    const error = errors[result.status];\n    if (error) {\n        throw new ApiError(options, result, error);\n    }\n\n    if (!result.ok) {\n        const errorStatus = result.status ?? 'unknown';\n        const errorStatusText = result.statusText ?? 'unknown';\n        const errorBody = (() => {\n            try {\n                return JSON.stringify(result.body, null, 2);\n            } catch (e) {\n                return undefined;\n            }\n        })();\n\n        throw new ApiError(options, result,\n            `Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`\n        );\n    }\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {\n    return new CancelablePromise(async (resolve, reject, onCancel) => {\n        try {\n            const url = getUrl(config, options);\n            const formData = getFormData(options);\n            const body = getRequestBody(options);\n            const headers = await getHeaders(config, options);\n\n            if (!onCancel.isCancelled) {\n                const response = await sendRequest(config, options, url, body, formData, headers, onCancel);\n                const responseBody = await getResponseBody(response);\n                const responseHeader = getResponseHeader(response, options.responseHeader);\n\n                const result: ApiResult = {\n                    url,\n                    ok: response.ok,\n                    status: response.status,\n                    statusText: response.statusText,\n                    body: responseHeader ?? responseBody,\n                };\n\n                catchErrorCodes(options, result);\n\n                resolve(result.body);\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\r\n","/* generated using openapi-typescript-codegen -- do no edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { MaintenanceModeSettings } from '../models/MaintenanceModeSettings';\nimport type { MaintenanceModeStatus } from '../models/MaintenanceModeStatus';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport { OpenAPI } from '../core/OpenAPI';\nimport { request as __request } from '../core/request';\n\nexport class MaintenanceModeResource {\n\n    /**\n     * @returns any Success\n     * @throws ApiError\n     */\n    public static getSettings(): CancelablePromise<MaintenanceModeSettings> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/maintenance/api/v1/GetSettings',\n        });\n    }\n\n    /**\n     * @returns any Success\n     * @throws ApiError\n     */\n    public static getStatus(): CancelablePromise<MaintenanceModeStatus> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/maintenance/api/v1/GetStatus',\n        });\n    }\n\n    /**\n     * @returns any Success\n     * @throws ApiError\n     */\n    public static saveSettings({\nrequestBody,\n}: {\nrequestBody?: MaintenanceModeSettings,\n}): CancelablePromise<any> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/maintenance/api/v1/SaveSettings',\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * @returns any Success\n     * @throws ApiError\n     */\n    public static toggleAccess({\nmaintenanceMode,\n}: {\nmaintenanceMode?: boolean,\n}): CancelablePromise<any> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/maintenance/api/v1/ToggleAccess',\n            query: {\n                'maintenanceMode': maintenanceMode,\n            },\n        });\n    }\n\n    /**\n     * @returns any Success\n     * @throws ApiError\n     */\n    public static toggleFrozen({\nmaintenanceMode,\n}: {\nmaintenanceMode?: boolean,\n}): CancelablePromise<any> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/maintenance/api/v1/ToggleFrozen',\n            query: {\n                'maintenanceMode': maintenanceMode,\n            },\n        });\n    }\n\n    /**\n     * @returns any Success\n     * @throws ApiError\n     */\n    public static toggleMode({\nmaintenanceMode,\n}: {\nmaintenanceMode?: boolean,\n}): CancelablePromise<any> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/maintenance/api/v1/ToggleMode',\n            query: {\n                'maintenanceMode': maintenanceMode,\n            },\n        });\n    }\n\n}\r\n","import { UmbControllerBase } from \"@umbraco-cms/backoffice/class-api\";\r\nimport { UmbContextToken } from \"@umbraco-cms/backoffice/context-api\";\r\nimport { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { UmbObjectState } from \"@umbraco-cms/backoffice/observable-api\";\r\nimport { MaintenanceModeResource, MaintenanceModeSettings, MaintenanceModeStatus, OpenAPI } from \"../api\";\r\nimport { UMB_AUTH_CONTEXT } from '@umbraco-cms/backoffice/auth'\r\nimport { tryExecuteAndNotify } from '@umbraco-cms/backoffice/resources';\r\n\r\nexport class MaintenanceContext extends UmbControllerBase {\r\n\r\n    #status = new UmbObjectState<MaintenanceModeStatus|undefined>(undefined);\r\n    readonly status = this.#status.asObservable();\r\n\r\n    #settings = new UmbObjectState<MaintenanceModeSettings|undefined>(undefined);\r\n    readonly settings = this.#settings.asObservable();\r\n\r\n    #host: UmbControllerHost;\r\n\r\n    \r\n    constructor(host: UmbControllerHost) {\r\n        super(host);\r\n        this.#host = host;\r\n        this.provideContext(MAINTENANCE_CONTEXT_TOKEN, this);\r\n        this.consumeContext(UMB_AUTH_CONTEXT, (_auth) => {\r\n\r\n            if (_auth===undefined){\r\n                return;\r\n            }\r\n\r\n            const umbOpenApi = () => _auth.getLatestToken();\r\n            OpenAPI.TOKEN = umbOpenApi;\r\n            //OpenAPI.BASE = umbOpenApi.base;\r\n            OpenAPI.WITH_CREDENTIALS = true;\r\n            this.getStatus();\r\n        });\r\n    }\r\n\r\n    async getStatus() {\r\n        let status = await tryExecuteAndNotify(this.#host, MaintenanceModeResource.getStatus());\r\n        console.log(status);\r\n        if(status.data != null) this.#status.setValue (status.data)\r\n    }\r\n\r\n    async getSettings() {\r\n        let settings = await tryExecuteAndNotify(this.#host, MaintenanceModeResource.getSettings());\r\n        console.log(settings);\r\n        if(settings.data != null) this.#settings.setValue (settings.data)\r\n    }\r\n\r\n    async toggleMaintenance() {\r\n        await tryExecuteAndNotify(this.#host, MaintenanceModeResource.toggleMode({\r\n            maintenanceMode: !this.#status.getValue()?.isInMaintenanceMode\r\n        }));\r\n        await this.getStatus();\r\n        console.log(\"eeby\");\r\n    }\r\n\r\n    async toggleFrozen() {\r\n        await tryExecuteAndNotify(this.#host, MaintenanceModeResource.toggleFrozen({\r\n            maintenanceMode: !this.#status.getValue()?.isContentFrozen\r\n        }));\r\n        await this.getStatus();\r\n        console.log(\"deeby\");\r\n    }\r\n\r\n    async toggleBackofficeAccess() {\r\n        \r\n        console.log(this.#status.getValue());\r\n        await tryExecuteAndNotify(this.#host, MaintenanceModeResource.toggleAccess({\r\n            \r\n            maintenanceMode: !this.#status?.getValue()?.settings?.allowBackOfficeUsersThrough\r\n        }));\r\n        await this.getStatus();\r\n    }\r\n\r\n    //////////////\r\n\r\n    updateSettings(partialData: Partial<MaintenanceModeSettings>) {\r\n        this.#settings.update(partialData);\r\n    }\r\n\r\n    async saveSettings() {\r\n        const settings = this.#settings.getValue();\r\n\r\n        if(settings != undefined) {\r\n            await tryExecuteAndNotify(this.#host, MaintenanceModeResource.saveSettings({\r\n                requestBody: settings\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\nexport default MaintenanceContext;\r\nexport const MAINTENANCE_CONTEXT_TOKEN = \r\n    new UmbContextToken<MaintenanceContext>(MaintenanceContext.name);"],"names":["ApiError","request","response","message","CancelError","CancelablePromise","executor","__privateAdd","_isResolved","_isRejected","_isCancelled","_cancelHandlers","_promise","_resolve","_reject","__privateSet","resolve","reject","onResolve","value","__privateGet","_a","onReject","reason","onCancel","cancelHandler","onFulfilled","onRejected","onFinally","error","OpenAPI","isDefined","isString","isStringWithValue","isBlob","isFormData","base64","str","getQueryString","params","qs","append","key","process","v","k","getUrl","config","options","encoder","path","substring","group","url","getFormData","formData","_","resolver","getHeaders","token","username","password","additionalHeaders","headers","credentials","getRequestBody","sendRequest","body","controller","getResponseHeader","responseHeader","content","getResponseBody","contentType","type","catchErrorCodes","result","errorStatus","errorStatusText","errorBody","responseBody","MaintenanceModeResource","__request","requestBody","maintenanceMode","MaintenanceContext","UmbControllerBase","host","_status","_settings","_host","UmbObjectState","MAINTENANCE_CONTEXT_TOKEN","UMB_AUTH_CONTEXT","_auth","umbOpenApi","status","tryExecuteAndNotify","settings","_c","_b","partialData","UmbContextToken"],"mappings":"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"}