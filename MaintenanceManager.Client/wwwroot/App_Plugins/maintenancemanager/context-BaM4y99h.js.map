{"version":3,"file":"context-BaM4y99h.js","sources":["../../../assets/src/api/core/ApiError.ts","../../../assets/src/api/core/CancelablePromise.ts","../../../assets/src/api/core/OpenAPI.ts","../../../assets/src/api/core/request.ts","../../../assets/src/api/services/MaintenanceModeResource.ts","../../../assets/src/contexts/context.ts"],"sourcesContent":["/* generated using openapi-typescript-codegen -- do no edit */\r\n/* istanbul ignore file */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\nimport type { ApiRequestOptions } from './ApiRequestOptions';\r\nimport type { ApiResult } from './ApiResult';\r\n\r\nexport class ApiError extends Error {\r\n    public readonly url: string;\r\n    public readonly status: number;\r\n    public readonly statusText: string;\r\n    public readonly body: any;\r\n    public readonly request: ApiRequestOptions;\r\n\r\n    constructor(request: ApiRequestOptions, response: ApiResult, message: string) {\r\n        super(message);\r\n\r\n        this.name = 'ApiError';\r\n        this.url = response.url;\r\n        this.status = response.status;\r\n        this.statusText = response.statusText;\r\n        this.body = response.body;\r\n        this.request = request;\r\n    }\r\n}\r\n","/* generated using openapi-typescript-codegen -- do no edit */\r\n/* istanbul ignore file */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\nexport class CancelError extends Error {\r\n\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = 'CancelError';\r\n    }\r\n\r\n    public get isCancelled(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport interface OnCancel {\r\n    readonly isResolved: boolean;\r\n    readonly isRejected: boolean;\r\n    readonly isCancelled: boolean;\r\n\r\n    (cancelHandler: () => void): void;\r\n}\r\n\r\nexport class CancelablePromise<T> implements Promise<T> {\r\n    #isResolved: boolean;\r\n    #isRejected: boolean;\r\n    #isCancelled: boolean;\r\n    readonly #cancelHandlers: (() => void)[];\r\n    readonly #promise: Promise<T>;\r\n    #resolve?: (value: T | PromiseLike<T>) => void;\r\n    #reject?: (reason?: any) => void;\r\n\r\n    constructor(\r\n        executor: (\r\n            resolve: (value: T | PromiseLike<T>) => void,\r\n            reject: (reason?: any) => void,\r\n            onCancel: OnCancel\r\n        ) => void\r\n    ) {\r\n        this.#isResolved = false;\r\n        this.#isRejected = false;\r\n        this.#isCancelled = false;\r\n        this.#cancelHandlers = [];\r\n        this.#promise = new Promise<T>((resolve, reject) => {\r\n            this.#resolve = resolve;\r\n            this.#reject = reject;\r\n\r\n            const onResolve = (value: T | PromiseLike<T>): void => {\r\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\r\n                    return;\r\n                }\r\n                this.#isResolved = true;\r\n                this.#resolve?.(value);\r\n            };\r\n\r\n            const onReject = (reason?: any): void => {\r\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\r\n                    return;\r\n                }\r\n                this.#isRejected = true;\r\n                this.#reject?.(reason);\r\n            };\r\n\r\n            const onCancel = (cancelHandler: () => void): void => {\r\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\r\n                    return;\r\n                }\r\n                this.#cancelHandlers.push(cancelHandler);\r\n            };\r\n\r\n            Object.defineProperty(onCancel, 'isResolved', {\r\n                get: (): boolean => this.#isResolved,\r\n            });\r\n\r\n            Object.defineProperty(onCancel, 'isRejected', {\r\n                get: (): boolean => this.#isRejected,\r\n            });\r\n\r\n            Object.defineProperty(onCancel, 'isCancelled', {\r\n                get: (): boolean => this.#isCancelled,\r\n            });\r\n\r\n            return executor(onResolve, onReject, onCancel as OnCancel);\r\n        });\r\n    }\r\n\r\n     get [Symbol.toStringTag]() {\r\n            return \"Cancellable Promise\";\r\n     }\r\n\r\n    public then<TResult1 = T, TResult2 = never>(\r\n        onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\r\n        onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\r\n    ): Promise<TResult1 | TResult2> {\r\n        return this.#promise.then(onFulfilled, onRejected);\r\n    }\r\n\r\n    public catch<TResult = never>(\r\n        onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null\r\n    ): Promise<T | TResult> {\r\n        return this.#promise.catch(onRejected);\r\n    }\r\n\r\n    public finally(onFinally?: (() => void) | null): Promise<T> {\r\n        return this.#promise.finally(onFinally);\r\n    }\r\n\r\n    public cancel(): void {\r\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\r\n            return;\r\n        }\r\n        this.#isCancelled = true;\r\n        if (this.#cancelHandlers.length) {\r\n            try {\r\n                for (const cancelHandler of this.#cancelHandlers) {\r\n                    cancelHandler();\r\n                }\r\n            } catch (error) {\r\n                console.warn('Cancellation threw an error', error);\r\n                return;\r\n            }\r\n        }\r\n        this.#cancelHandlers.length = 0;\r\n        this.#reject?.(new CancelError('Request aborted'));\r\n    }\r\n\r\n    public get isCancelled(): boolean {\r\n        return this.#isCancelled;\r\n    }\r\n}\r\n","/* generated using openapi-typescript-codegen -- do no edit */\r\n/* istanbul ignore file */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\nimport type { ApiRequestOptions } from './ApiRequestOptions';\r\n\r\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\r\ntype Headers = Record<string, string>;\r\n\r\nexport type OpenAPIConfig = {\r\n    BASE: string;\r\n    VERSION: string;\r\n    WITH_CREDENTIALS: boolean;\r\n    CREDENTIALS: 'include' | 'omit' | 'same-origin';\r\n    TOKEN?: string | Resolver<string> | undefined;\r\n    USERNAME?: string | Resolver<string> | undefined;\r\n    PASSWORD?: string | Resolver<string> | undefined;\r\n    HEADERS?: Headers | Resolver<Headers> | undefined;\r\n    ENCODE_PATH?: ((path: string) => string) | undefined;\r\n};\r\n\r\nexport const OpenAPI: OpenAPIConfig = {\r\n    BASE: '',\r\n    VERSION: 'Latest',\r\n    WITH_CREDENTIALS: false,\r\n    CREDENTIALS: 'include',\r\n    TOKEN: undefined,\r\n    USERNAME: undefined,\r\n    PASSWORD: undefined,\r\n    HEADERS: undefined,\r\n    ENCODE_PATH: undefined,\r\n};\r\n","/* generated using openapi-typescript-codegen -- do no edit */\r\n/* istanbul ignore file */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\nimport { ApiError } from './ApiError';\r\nimport type { ApiRequestOptions } from './ApiRequestOptions';\r\nimport type { ApiResult } from './ApiResult';\r\nimport { CancelablePromise } from './CancelablePromise';\r\nimport type { OnCancel } from './CancelablePromise';\r\nimport type { OpenAPIConfig } from './OpenAPI';\r\n\r\nexport const isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {\r\n    return value !== undefined && value !== null;\r\n};\r\n\r\nexport const isString = (value: any): value is string => {\r\n    return typeof value === 'string';\r\n};\r\n\r\nexport const isStringWithValue = (value: any): value is string => {\r\n    return isString(value) && value !== '';\r\n};\r\n\r\nexport const isBlob = (value: any): value is Blob => {\r\n    return (\r\n        typeof value === 'object' &&\r\n        typeof value.type === 'string' &&\r\n        typeof value.stream === 'function' &&\r\n        typeof value.arrayBuffer === 'function' &&\r\n        typeof value.constructor === 'function' &&\r\n        typeof value.constructor.name === 'string' &&\r\n        /^(Blob|File)$/.test(value.constructor.name) &&\r\n        /^(Blob|File)$/.test(value[Symbol.toStringTag])\r\n    );\r\n};\r\n\r\nexport const isFormData = (value: any): value is FormData => {\r\n    return value instanceof FormData;\r\n};\r\n\r\nexport const base64 = (str: string): string => {\r\n    try {\r\n        return btoa(str);\r\n    } catch (err) {\r\n        // @ts-ignore\r\n        return Buffer.from(str).toString('base64');\r\n    }\r\n};\r\n\r\nexport const getQueryString = (params: Record<string, any>): string => {\r\n    const qs: string[] = [];\r\n\r\n    const append = (key: string, value: any) => {\r\n        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\r\n    };\r\n\r\n    const process = (key: string, value: any) => {\r\n        if (isDefined(value)) {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(v => {\r\n                    process(key, v);\r\n                });\r\n            } else if (typeof value === 'object') {\r\n                Object.entries(value).forEach(([k, v]) => {\r\n                    process(`${key}[${k}]`, v);\r\n                });\r\n            } else {\r\n                append(key, value);\r\n            }\r\n        }\r\n    };\r\n\r\n    Object.entries(params).forEach(([key, value]) => {\r\n        process(key, value);\r\n    });\r\n\r\n    if (qs.length > 0) {\r\n        return `?${qs.join('&')}`;\r\n    }\r\n\r\n    return '';\r\n};\r\n\r\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\r\n    const encoder = config.ENCODE_PATH || encodeURI;\r\n\r\n    const path = options.url\r\n        .replace('{api-version}', config.VERSION)\r\n        .replace(/{(.*?)}/g, (substring: string, group: string) => {\r\n            if (options.path?.hasOwnProperty(group)) {\r\n                return encoder(String(options.path[group]));\r\n            }\r\n            return substring;\r\n        });\r\n\r\n    const url = `${config.BASE}${path}`;\r\n    if (options.query) {\r\n        return `${url}${getQueryString(options.query)}`;\r\n    }\r\n    return url;\r\n};\r\n\r\nexport const getFormData = (options: ApiRequestOptions): FormData | undefined => {\r\n    if (options.formData) {\r\n        const formData = new FormData();\r\n\r\n        const process = (key: string, value: any) => {\r\n            if (isString(value) || isBlob(value)) {\r\n                formData.append(key, value);\r\n            } else {\r\n                formData.append(key, JSON.stringify(value));\r\n            }\r\n        };\r\n\r\n        Object.entries(options.formData)\r\n            .filter(([_, value]) => isDefined(value))\r\n            .forEach(([key, value]) => {\r\n                if (Array.isArray(value)) {\r\n                    value.forEach(v => process(key, v));\r\n                } else {\r\n                    process(key, value);\r\n                }\r\n            });\r\n\r\n        return formData;\r\n    }\r\n    return undefined;\r\n};\r\n\r\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\r\n\r\nexport const resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {\r\n    if (typeof resolver === 'function') {\r\n        return (resolver as Resolver<T>)(options);\r\n    }\r\n    return resolver;\r\n};\r\n\r\nexport const getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions): Promise<Headers> => {\r\n    const token = await resolve(options, config.TOKEN);\r\n    const username = await resolve(options, config.USERNAME);\r\n    const password = await resolve(options, config.PASSWORD);\r\n    const additionalHeaders = await resolve(options, config.HEADERS);\r\n\r\n    const headers = Object.entries({\r\n        Accept: 'application/json',\r\n        ...additionalHeaders,\r\n        ...options.headers,\r\n    })\r\n        .filter(([_, value]) => isDefined(value))\r\n        .reduce((headers, [key, value]) => ({\r\n            ...headers,\r\n            [key]: String(value),\r\n        }), {} as Record<string, string>);\r\n\r\n    if (isStringWithValue(token)) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n\r\n    if (isStringWithValue(username) && isStringWithValue(password)) {\r\n        const credentials = base64(`${username}:${password}`);\r\n        headers['Authorization'] = `Basic ${credentials}`;\r\n    }\r\n\r\n    if (options.body) {\r\n        if (options.mediaType) {\r\n            headers['Content-Type'] = options.mediaType;\r\n        } else if (isBlob(options.body)) {\r\n            headers['Content-Type'] = options.body.type || 'application/octet-stream';\r\n        } else if (isString(options.body)) {\r\n            headers['Content-Type'] = 'text/plain';\r\n        } else if (!isFormData(options.body)) {\r\n            headers['Content-Type'] = 'application/json';\r\n        }\r\n    }\r\n\r\n    return new Headers(headers);\r\n};\r\n\r\nexport const getRequestBody = (options: ApiRequestOptions): any => {\r\n    if (options.body !== undefined) {\r\n        if (options.mediaType?.includes('/json')) {\r\n            return JSON.stringify(options.body)\r\n        } else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\r\n            return options.body;\r\n        } else {\r\n            return JSON.stringify(options.body);\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\n\r\nexport const sendRequest = async (\r\n    config: OpenAPIConfig,\r\n    options: ApiRequestOptions,\r\n    url: string,\r\n    body: any,\r\n    formData: FormData | undefined,\r\n    headers: Headers,\r\n    onCancel: OnCancel\r\n): Promise<Response> => {\r\n    const controller = new AbortController();\r\n\r\n    const request: RequestInit = {\r\n        headers,\r\n        body: body ?? formData,\r\n        method: options.method,\r\n        signal: controller.signal,\r\n    };\r\n\r\n    if (config.WITH_CREDENTIALS) {\r\n        request.credentials = config.CREDENTIALS;\r\n    }\r\n\r\n    onCancel(() => controller.abort());\r\n\r\n    return await fetch(url, request);\r\n};\r\n\r\nexport const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {\r\n    if (responseHeader) {\r\n        const content = response.headers.get(responseHeader);\r\n        if (isString(content)) {\r\n            return content;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\n\r\nexport const getResponseBody = async (response: Response): Promise<any> => {\r\n    if (response.status !== 204) {\r\n        try {\r\n            const contentType = response.headers.get('Content-Type');\r\n            if (contentType) {\r\n                const jsonTypes = ['application/json', 'application/problem+json']\r\n                const isJSON = jsonTypes.some(type => contentType.toLowerCase().startsWith(type));\r\n                if (isJSON) {\r\n                    return await response.json();\r\n                } else {\r\n                    return await response.text();\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\n\r\nexport const catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\r\n    const errors: Record<number, string> = {\r\n        400: 'Bad Request',\r\n        401: 'Unauthorized',\r\n        403: 'Forbidden',\r\n        404: 'Not Found',\r\n        500: 'Internal Server Error',\r\n        502: 'Bad Gateway',\r\n        503: 'Service Unavailable',\r\n        ...options.errors,\r\n    }\r\n\r\n    const error = errors[result.status];\r\n    if (error) {\r\n        throw new ApiError(options, result, error);\r\n    }\r\n\r\n    if (!result.ok) {\r\n        const errorStatus = result.status ?? 'unknown';\r\n        const errorStatusText = result.statusText ?? 'unknown';\r\n        const errorBody = (() => {\r\n            try {\r\n                return JSON.stringify(result.body, null, 2);\r\n            } catch (e) {\r\n                return undefined;\r\n            }\r\n        })();\r\n\r\n        throw new ApiError(options, result,\r\n            `Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * Request method\r\n * @param config The OpenAPI configuration object\r\n * @param options The request options from the service\r\n * @returns CancelablePromise<T>\r\n * @throws ApiError\r\n */\r\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {\r\n    return new CancelablePromise(async (resolve, reject, onCancel) => {\r\n        try {\r\n            const url = getUrl(config, options);\r\n            const formData = getFormData(options);\r\n            const body = getRequestBody(options);\r\n            const headers = await getHeaders(config, options);\r\n\r\n            if (!onCancel.isCancelled) {\r\n                const response = await sendRequest(config, options, url, body, formData, headers, onCancel);\r\n                const responseBody = await getResponseBody(response);\r\n                const responseHeader = getResponseHeader(response, options.responseHeader);\r\n\r\n                const result: ApiResult = {\r\n                    url,\r\n                    ok: response.ok,\r\n                    status: response.status,\r\n                    statusText: response.statusText,\r\n                    body: responseHeader ?? responseBody,\r\n                };\r\n\r\n                catchErrorCodes(options, result);\r\n\r\n                resolve(result.body);\r\n            }\r\n        } catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n};\r\n","/* generated using openapi-typescript-codegen -- do no edit */\r\n/* istanbul ignore file */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\nimport type { MaintenanceModeSettings } from '../models/MaintenanceModeSettings';\r\nimport type { MaintenanceModeStatus } from '../models/MaintenanceModeStatus';\r\n\r\nimport type { CancelablePromise } from '../core/CancelablePromise';\r\nimport { OpenAPI } from '../core/OpenAPI';\r\nimport { request as __request } from '../core/request';\r\n\r\nexport class MaintenanceModeResource {\r\n\r\n    /**\r\n     * @returns any Success\r\n     * @throws ApiError\r\n     */\r\n    public static getSettings(): CancelablePromise<MaintenanceModeSettings> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/maintenance/api/v1/GetSettings',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns any Success\r\n     * @throws ApiError\r\n     */\r\n    public static getStatus(): CancelablePromise<MaintenanceModeStatus> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/maintenance/api/v1/GetStatus',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns any Success\r\n     * @throws ApiError\r\n     */\r\n    public static saveSettings({\r\nrequestBody,\r\n}: {\r\nrequestBody?: MaintenanceModeSettings,\r\n}): CancelablePromise<any> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/maintenance/api/v1/SaveSettings',\r\n            body: requestBody,\r\n            mediaType: 'application/json',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns any Success\r\n     * @throws ApiError\r\n     */\r\n    public static toggleAccess({\r\nmaintenanceMode,\r\n}: {\r\nmaintenanceMode?: boolean,\r\n}): CancelablePromise<any> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/maintenance/api/v1/ToggleAccess',\r\n            query: {\r\n                'maintenanceMode': maintenanceMode,\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns any Success\r\n     * @throws ApiError\r\n     */\r\n    public static toggleFrozen({\r\nmaintenanceMode,\r\n}: {\r\nmaintenanceMode?: boolean,\r\n}): CancelablePromise<any> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/maintenance/api/v1/ToggleFrozen',\r\n            query: {\r\n                'maintenanceMode': maintenanceMode,\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns any Success\r\n     * @throws ApiError\r\n     */\r\n    public static toggleMode({\r\nmaintenanceMode,\r\n}: {\r\nmaintenanceMode?: boolean,\r\n}): CancelablePromise<any> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/maintenance/api/v1/ToggleMode',\r\n            query: {\r\n                'maintenanceMode': maintenanceMode,\r\n            },\r\n        });\r\n    }\r\n\r\n}\r\n","import { UmbControllerBase } from \"@umbraco-cms/backoffice/class-api\";\r\nimport { UmbContextToken } from \"@umbraco-cms/backoffice/context-api\";\r\nimport { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { UmbObjectState } from \"@umbraco-cms/backoffice/observable-api\";\r\nimport { MaintenanceModeResource, MaintenanceModeSettings, MaintenanceModeStatus, OpenAPI } from \"../api\";\r\nimport { UMB_AUTH_CONTEXT } from '@umbraco-cms/backoffice/auth'\r\nimport { tryExecuteAndNotify } from '@umbraco-cms/backoffice/resources';\r\n\r\nexport class MaintenanceContext extends UmbControllerBase {\r\n\r\n    #status = new UmbObjectState<MaintenanceModeStatus|undefined>(undefined);\r\n    readonly status = this.#status.asObservable();\r\n\r\n    #settings = new UmbObjectState<MaintenanceModeSettings|undefined>(undefined);\r\n    readonly settings = this.#settings.asObservable();\r\n\r\n    #host: UmbControllerHost;\r\n\r\n    \r\n    constructor(host: UmbControllerHost) {\r\n        super(host);\r\n        this.#host = host;\r\n        this.provideContext(MAINTENANCE_CONTEXT_TOKEN, this);\r\n        this.consumeContext(UMB_AUTH_CONTEXT, (_auth) => {\r\n\r\n            if (_auth===undefined){\r\n                return;\r\n            }\r\n\r\n            const umbOpenApi = () => _auth.getLatestToken();\r\n            OpenAPI.TOKEN = umbOpenApi;\r\n            //OpenAPI.BASE = umbOpenApi.base;\r\n            OpenAPI.WITH_CREDENTIALS = true;\r\n            this.getStatus();\r\n        });\r\n    }\r\n\r\n    async getStatus() {\r\n        let status = await tryExecuteAndNotify(this.#host, MaintenanceModeResource.getStatus());\r\n        console.log(status);\r\n        if(status.data != null) this.#status.setValue (status.data)\r\n    }\r\n\r\n    async getSettings() {\r\n        let settings = await tryExecuteAndNotify(this.#host, MaintenanceModeResource.getSettings());\r\n        console.log(settings);\r\n        if(settings.data != null) this.#settings.setValue (settings.data)\r\n    }\r\n\r\n    async toggleMaintenance() {\r\n        await tryExecuteAndNotify(this.#host, MaintenanceModeResource.toggleMode({\r\n            maintenanceMode: !this.#status.getValue()?.isInMaintenanceMode\r\n        }));\r\n        await this.getStatus();\r\n        console.log(\"eeby\");\r\n    }\r\n\r\n    async toggleFrozen() {\r\n        await tryExecuteAndNotify(this.#host, MaintenanceModeResource.toggleFrozen({\r\n            maintenanceMode: !this.#status.getValue()?.isContentFrozen\r\n        }));\r\n        await this.getStatus();\r\n        console.log(\"deeby\");\r\n    }\r\n\r\n    async toggleBackofficeAccess() {\r\n        \r\n        console.log(this.#status.getValue());\r\n        await tryExecuteAndNotify(this.#host, MaintenanceModeResource.toggleAccess({\r\n            \r\n            maintenanceMode: !this.#status?.getValue()?.settings?.allowBackOfficeUsersThrough\r\n        }));\r\n        await this.getStatus();\r\n    }\r\n\r\n    //////////////\r\n\r\n    updateSettings(partialData: Partial<MaintenanceModeSettings>) {\r\n        this.#settings.update(partialData);\r\n    }\r\n\r\n    async saveSettings() {\r\n        const settings = this.#settings.getValue();\r\n\r\n        if(settings != undefined) {\r\n            await tryExecuteAndNotify(this.#host, MaintenanceModeResource.saveSettings({\r\n                requestBody: settings\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\nexport default MaintenanceContext;\r\nexport const MAINTENANCE_CONTEXT_TOKEN = \r\n    new UmbContextToken<MaintenanceContext>(MaintenanceContext.name);"],"names":["ApiError","request","response","message","CancelError","CancelablePromise","executor","__privateAdd","_isResolved","_isRejected","_isCancelled","_cancelHandlers","_promise","_resolve","_reject","__privateSet","resolve","reject","onResolve","value","__privateGet","_a","onReject","reason","onCancel","cancelHandler","onFulfilled","onRejected","onFinally","error","OpenAPI","isDefined","isString","isStringWithValue","isBlob","isFormData","base64","str","getQueryString","params","qs","append","key","process","v","k","getUrl","config","options","encoder","path","substring","group","url","getFormData","formData","_","resolver","getHeaders","token","username","password","additionalHeaders","headers","credentials","getRequestBody","sendRequest","body","controller","getResponseHeader","responseHeader","content","getResponseBody","contentType","type","catchErrorCodes","result","errorStatus","errorStatusText","errorBody","responseBody","MaintenanceModeResource","__request","requestBody","maintenanceMode","MaintenanceContext","UmbControllerBase","host","_status","_settings","_host","UmbObjectState","MAINTENANCE_CONTEXT_TOKEN","UMB_AUTH_CONTEXT","_auth","umbOpenApi","status","tryExecuteAndNotify","settings","_c","_b","partialData","UmbContextToken"],"mappings":"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"}